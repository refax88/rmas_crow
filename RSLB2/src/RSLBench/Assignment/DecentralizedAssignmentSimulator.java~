package RSLBench.Assignment;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import RSLBench.Params;
import RSLBench.Comm.AbstractMessage;
import RSLBench.Comm.ComSimulator;
import RSLBench.Helpers.SimpleID;
import RSLBench.Helpers.Stats;
import RSLBench.Helpers.UtilityMatrix;

import rescuecore2.log.Logger;
import rescuecore2.worldmodel.EntityID;

public class DecentralizedAssignmentSimulator implements AssignmentInterface
{
    private String _className;
    private List<DecentralAssignment> _simulatedAgents;
    private ComSimulator _com;
    private int _time;

    public DecentralizedAssignmentSimulator(String className, ComSimulator com)
    {
        _className = className;
        _com = com;
        _time = 0;
    }

    @Override
    public Assignment compute(UtilityMatrix utility)
    {
     	long start = System.currentTimeMillis();
        initializeAgents(utility);        

        Logger.debugColor("starting DA Simulator", Logger.BG_YELLOW);
        boolean done = false;
        int iterations = 0;
        int initialConflicts = 0;
        int finalConflicts = 0;
        int MAX_ITERATIONS = 1000; // TODO add to config file
        while (!done && iterations < MAX_ITERATIONS)
        {
            //System.out.println("Ciclo "+iterations);
            // statistics
            if (iterations == 1)
            {
                initialConflicts = countConflicts(utility);
            }
            
            // send messages
            for (DecentralAssignment agent : _simulatedAgents)
            {
            	agent.sendMessages(_com);
            	
            }

            // receive messages
            for (DecentralAssignment agent : _simulatedAgents)
            {
                agent.receiveMessages(_com.retrieveMessages(agent.getAgentID()));
            }

            // improve assignment
            done = true;
            for (DecentralAssignment agent : _simulatedAgents)
            {
                boolean improved = agent.improveAssignment();
                done = done && !improved;
            }                        
            iterations++;
        }
        Logger.debugColor("Done with iterations. Needed: " + iterations , Logger.BG_WHITE);
        
     	long end = System.currentTimeMillis();
     	Logger.debugColor("Total computation time for " + _className + " was "+(end-start)+" ms.", Logger.BG_YELLOW);

        
        finalConflicts = countConflicts(utility);
        Logger.debugColor("DA Simulation complete initial conflicts = " + initialConflicts +
        		" final conflicts = " + finalConflicts, Logger.BG_YELLOW);

        // Combine assignments
        Assignment assignments = new Assignment();
        System.out.println("Ciclo "+iterations);
        for (DecentralAssignment agent : _simulatedAgents)
        {
           if (agent.getTargetID() != Assignment.UNKNOWN_TARGET_ID)
            assignments.assign(agent.getAgentID(), agent.getTargetID());
        
        }
        Stats.writeDSAStatsToFile("logs/decentralized_assignment_stats_range_"+Params.simulatedCommunicationRange/1000+".dat", 
        							_time, initialConflicts, finalConflicts, iterations);
        _time++;
        Logger.debugColor("Combin Ass done", Logger.BG_MAGENTA);

        return assignments;
    }
    
    private int countConflicts(UtilityMatrix utilityM)
    {    	
        Assignment ass = new Assignment();
        for (DecentralAssignment agent : _simulatedAgents) {
        	if (agent.getTargetID() != Assignment.UNKNOWN_TARGET_ID)
        		ass.assign(agent.getAgentID(), agent.getTargetID());
        }    	
        int conflicts = 0;
        for (EntityID t : utilityM.getTargets()) {
        	conflicts += Math.abs(ass.getTargetSelectionCount(t) - utilityM.getRequiredAgentCount(t));
        }        	
        return conflicts;
    }
    
    private void initializeAgents(UtilityMatrix utilityM)
    {
        // initialize simulated agents
        _simulatedAgents = new ArrayList<DecentralAssignment>();
        try
        {
            Class<?> daClass = Class.forName(_className);
            
            for (EntityID agentID : utilityM.getAgents()) 
            {
                DecentralAssignment agent = (DecentralAssignment) daClass.newInstance();                
                // Give only local utility matrix to each agent!!!
                
                UtilityMatrix localUM = convertToLocal(agentID, utilityM);
                Logger.debugColor("Agent " + SimpleID.conv(agentID) + " has local UM with " + localUM.getNumAgents() + " agents and " + 
                			       localUM.getNumTargets() + " targets. Agents: ", Logger.BG_MAGENTA);
                //for (EntityID a : localUM.getAgents()) {
                //	System.out.println(SimpleID.conv(a) + "," );
                //}
                //System.out.println();
                	
                agent.resetStructures();
                agent.initialize(agentID, localUM);
                _simulatedAgents.add(agent);
            }
        } catch (ClassNotFoundException e)
        {
            Logger.debugColor("SolverClass could not be found: " + _className, Logger.BG_RED);
            e.printStackTrace();
        } catch (InstantiationException e)
        {
            Logger.debugColor("SolverClass " + _className + " could not be instantiated. (abstract?!)", Logger.BG_RED);
            e.printStackTrace();
        } catch (IllegalAccessException e)
        {
            Logger.debugColor("SolverClass " + _className + " must have an empty constructor.", Logger.BG_RED);
            e.printStackTrace();
        }
        Logger.debugColor("Initialized " + _simulatedAgents.size() + " agents of class " + _className, Logger.BG_BLUE);
    }
    
    /**
     * This function computes from a utility matrix over all agents and targets
     * a local utility matrix for a single agent (agentID) and all its neighbors 
     * within communication range (comm_range).
     * 
     * @param agentID
     * @param comm_range
     * @return
     */
    public UtilityMatrix convertToLocal(EntityID agentID, UtilityMatrix um)  
    {
    	Set<EntityID> dummy = _com.getNeighbors(agentID);
    	ArrayList<EntityID> neighbors = new ArrayList<EntityID> ();
    	for (EntityID a : dummy) {
            if (a.getValue() != agentID.getValue()) {
    		neighbors.add(a);
            }                
    	}    	
    	neighbors.add(agentID); // add ourself !!

    	// Now lets add only high value targets up to a limited number !!
    	int N=70; // TODO put in config file
    	ArrayList<EntityID> targets = (ArrayList<EntityID>) um.getNBestTargets(N, neighbors);
    	return new UtilityMatrix(neighbors, targets, um.getAgentLocations(), um.getWorld());    	    	
    }
}
